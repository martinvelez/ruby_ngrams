#!/usr/bin/env ruby

require 'ruby_cli'
require 'ruby_ngrams'

class App
	include RubyCLI	

	def define_command_options() @options = {:regex => //, :n => 2}	end

	# Redefining the RubyCLI define_option_parser method
	# Need to tell the OptionParser how to handle this command specific options.
	def define_option_parser
		#configure an OptionParser
		OptionParser.new do |opts|		
			opts.banner = "Usage: #{__FILE__} [OPTIONS]... [FILE]..."
			opts.separator ""
			opts.separator "Specific options:"
			opts.on('-h', '--help', 'displays help information') do
				@default_options[:help] = true
				output_help
			end
			opts.on('-V','--verbose','Run verbosely') do 
				@default_options[:verbose] = true
			end
			opts.on('-n', '--n NUM', Integer, 'set length n for n-grams') do |n|
				@options[:n] = n
			end
			opts.on('-r', '--regex "REGEX"', Regexp, 'set regex to split string into tokens') do |r|
				@options[:regex] = r
			end
		end
	end

	def command
		# If arguments were provided, then they have to be names of files.
		# These files will be handled using Ruby's ARGF builtin variable.
		# If arguments are not filenames, then this application will produce a 
		# a runtime error informing the user that the given file could not be opened.
	
		# ARGF is a stream designed for use in scripts that process files given as 
		#	command-line arguments or passed in via STDIN.
		# The arguments passed to your script are stored in the ARGV Array, 
		#	one argument per element. ARGF assumes that any arguments that arenâ€™t 
		# filenames have been removed from ARGV.
		text = ARGF.read
		text.ngrams(@options).each { |ngram| puts ngram.inspect }
	end

end


if __FILE__ == $0
	app = App.new(ARGV, __FILE__)
	app.run
end

