#!/usr/bin/ruby -w

require File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "ruby_ngrams.rb"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "ruby_cli.rb"))

class App 
	include RubyCLI	

	# Define the constructor to 
	def initialize(default_argv)
		@default_argv = default_argv
		@default_options = {:help => false, :verbose => false}
		@arguments = {}
		@options = {:regex => //, :n => 2}
		@opt_parser = nil
	end

	# Define an OptionParser to parse the command line
	def parse_options?
		#configure an OptionParser
		@opt_parser = OptionParser.new do |opts|		
			opts.banner = "Usage: #{__FILE__} [OPTIONS]... [FILE]..."
			opts.separator ""
			opts.separator "Specific options:"
			opts.on('-h', '--help', 'displays help information') do
				@default_options[:help] = true
				output_help
			end
			opts.on('-V','--verbose','Run verbosely') do 
				@default_options[:verbose] = true
			end
			opts.on('-n', '--n NUM', Integer, 'set length n for n-grams') do |n|
				@options[:n] = n
			end
			opts.on('-r', '--regex REGEX', Regexp, 'set regex to split string into tokens') do |r|
				@options[:regex] = r
			end
		end
		@opt_parser.parse!(@default_argv) rescue return false
		true
	end
	
	def process_options() true end

	# If arguments were provided, then they have to be names of files.
	# These files will be handled using Ruby's ARGF builtin variable.
	def process_arguments()	true end

	# Application logic
	def command
		text = ARGF.read
		text.ngrams(@options).each do |ngram|
			puts ngram.inspect
		end
	end

end


if __FILE__ == $0
	app = App.new(ARGV)
	app.run
end

